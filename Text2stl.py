import os
import time
import argparse
from tqdm import tqdm
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import glob
def generate_stl(name,name2,height, width, font):
    """
    H√†m t·∫°o file STL t·ª´ vƒÉn b·∫£n nh·∫≠p v√†o tr√™n trang text2stl.
    :param name: N·ªôi dung ch·ªØ d√≤ng 1 c·∫ßn t·∫°o STL
    :param name2: N·ªôi dung ch·ªØ d√≤ng 2 c·∫ßn t·∫°o STL
    :param height: Chi·ªÅu cao ch·ªØ
    :param width: Chi·ªÅu d√†i ch·ªØ
    :param font: Font ch·ªØ s·ª≠ d·ª•ng
    """
    print(f"üî® ƒêang t·∫°o STL cho d√≤ng 1:'{name}' d√≤ng 2:{name2} v·ªõi chi·ªÅu cao {height}mm, chi·ªÅu d√†i {width}mm, font: {font}")

    # C·∫•u h√¨nh tr√¨nh duy·ªát Chrome headless
    options = Options()
    options.add_argument("--headless")  # Kh√¥ng hi·ªÉn th·ªã c·ª≠a s·ªï tr√¨nh duy·ªát
    driver = webdriver.Chrome(options=options)

    # M·ªü trang web
    driver.get("https://text2stl.mestres.fr/en-us/generator")
    wait = WebDriverWait(driver, 8)
    driver.refresh()
    time.sleep(4)

    # T√¨m ph·∫ßn t·ª≠ nh·∫≠p n·ªôi dung ch·ªØ
    text_box = wait.until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "calcite-text-area[data-test-settings-text]"))
    )
    # X√≥a n·ªôi dung c≈© v√† nh·∫≠p n·ªôi dung m·ªõi
    driver.execute_script("arguments[0].value = '';", text_box)
    driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", text_box)
    text_box.click()  # Click ƒë·ªÉ k√≠ch ho·∫°t √¥ nh·∫≠p li·ªáu
    text_box.send_keys(Keys.CONTROL, "a")  # Ch·ªçn to√†n b·ªô n·ªôi dung
    text_box.send_keys(Keys.BACKSPACE)  # X√≥a n·ªôi dung
    text_box.send_keys(name)  # Nh·∫≠p n·ªôi dung m·ªõi
    text_box.send_keys(Keys.ENTER)  # X√≥a n·ªôi dung
    text_box.send_keys(name2)  # Nh·∫≠p n·ªôi dung m·ªõi
    print(f"‚úÖ ƒê√£ nh·∫≠p n·ªôi dung: {name} v√† {name2}")
    driver.execute_script("arguments[0].scrollIntoView();", text_box)
    driver.save_screenshot("ghinoidung.png") 
    time.sleep(1)
    # Nh·∫≠p k√≠ch th∆∞·ªõc ch·ªØ
    text_size_input = wait.until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "calcite-input-number[data-test-settings-size]"))
    )
    driver.execute_script("arguments[0].scrollIntoView();", text_size_input)
    time.sleep(2)
    text_size_input.click()
    text_size_input.send_keys(Keys.CONTROL, "a")  # Ch·ªçn to√†n b·ªô n·ªôi dung
    text_size_input.send_keys(Keys.BACKSPACE)  # X√≥a n·ªôi dung
    text_size_input.send_keys(width)  # Nh·∫≠p gi√° tr·ªã m·ªõi

    print(f"‚úÖ ƒê√£ ƒë·∫∑t chi·ªÅu d√†i: {width}mm")
    # T√¨m ph·∫ßn t·ª≠ <img> nh∆∞ng click v√†o ph·∫ßn t·ª≠ cha c·ªßa n√≥
    shape_select = WebDriverWait(driver, 5).until(
        EC.presence_of_element_located(
            (By.CSS_SELECTOR, 'img[src="/img/type_1-ef2c7bc83976e176942a0ba5f7e76251.png"]')
        )
    )
    # Cu·ªôn ƒë·∫øn ph·∫ßn t·ª≠ n·∫øu b·ªã che khu·∫•t
    driver.execute_script("arguments[0].scrollIntoView();", shape_select)
    time.sleep(1)  # ƒê·ª£i trang load l·∫°i n·∫øu c·∫ßn

    # T√¨m ph·∫ßn t·ª≠ cha c·ªßa n√≥ ƒë·ªÉ click (v√≠ d·ª•: th·∫ª cha c·ªßa img)
    parent_element = shape_select.find_element(By.XPATH, "./..")
    driver.execute_script("arguments[0].click();", parent_element)
    text_height_input = wait.until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "calcite-input-number[data-test-settings-height]"))
    )
    driver.execute_script("arguments[0].scrollIntoView();", text_height_input)
    time.sleep(2)
    driver.execute_script("arguments[0].value = '';", text_height_input)
    driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", text_height_input)
    text_height_input.click()  # Click ƒë·ªÉ k√≠ch ho·∫°t √¥ nh·∫≠p li·ªáu
    text_height_input.send_keys(Keys.CONTROL, "a")  # Ch·ªçn to√†n b·ªô n·ªôi dung
    text_height_input.send_keys(Keys.BACKSPACE)  # X√≥a n·ªôi dung
    text_height_input.send_keys(height)  # Nh·∫≠p n·ªôi dung m·ªõi
    print(f"‚úÖ ƒê√£ ƒë·∫∑t ƒë·ªô d√†y: {height}mm")
    # Ch·ªçn font
    # T√¨m ph·∫ßn t·ª≠ b·∫±ng CSS_SELECTOR n·∫øu kh√¥ng c√≥ ID
    kerning_box = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "calcite-input-number[data-test-settings-spacing]"))
    )
    # Cu·ªôn ƒë·∫øn ph·∫ßn t·ª≠ ƒë·ªÉ tr√°nh b·ªã che khu·∫•t
    driver.execute_script("arguments[0].scrollIntoView();", kerning_box)
    time.sleep(1)
    # Ki·ªÉm tra n·∫øu ph·∫ßn t·ª≠ c√≥ th·ªÉ nh·∫≠p li·ªáu
    # X√≥a n·ªôi dung c≈©
    driver.execute_script("arguments[0].value = '';", kerning_box)
    driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", kerning_box)
    kerning_box.click()  # Click ƒë·ªÉ k√≠ch ho·∫°t √¥ nh·∫≠p li·ªáu
    kerning_box.send_keys(Keys.CONTROL, "a")  # Ch·ªçn to√†n b·ªô n·ªôi dung
    kerning_box.send_keys(Keys.BACKSPACE)  # X√≥a n·ªôi dung
    kerning_box.send_keys("0")  # Nh·∫≠p n·ªôi dung m·ªõi
    print(f"‚úÖ ƒê√£ ƒë·∫∑t kho·∫£ng c√°ch ch·ªØ: 0 mm")

 
    # T√¨m ph·∫ßn t·ª≠ b·∫±ng CSS_SELECTOR n·∫øu kh√¥ng c√≥ ID
    Line_kerning = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "calcite-input-number[data-test-settings-vspacing]"))
    )
    # Cu·ªôn ƒë·∫øn ph·∫ßn t·ª≠ ƒë·ªÉ tr√°nh b·ªã che khu·∫•t
    # Ki·ªÉm tra n·∫øu ph·∫ßn t·ª≠ c√≥ th·ªÉ nh·∫≠p li·ªáu
    # X√≥a n·ªôi dung c≈©
    driver.execute_script("arguments[0].value = '';", Line_kerning)
    driver.execute_script("arguments[0].dispatchEvent(new Event('input'));", Line_kerning)
    Line_kerning.click()  # Click ƒë·ªÉ k√≠ch ho·∫°t √¥ nh·∫≠p li·ªáu
    Line_kerning.send_keys(Keys.CONTROL, "a")  # Ch·ªçn to√†n b·ªô n·ªôi dung
    Line_kerning.send_keys(Keys.BACKSPACE)  # X√≥a n·ªôi dung
    Line_kerning.send_keys("1.5")  # Nh·∫≠p n·ªôi dung m·ªõi
    print(f"‚úÖ ƒê√£ ƒë·∫∑t kho·∫£ng c√°ch d√≤ng: 1.5 mm")
    driver.save_screenshot("debug.png") 

    # Ch·ªù v√† t√¨m combobox ch·ª©a danh s√°ch font
    font_combobox = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "calcite-combobox[selection-mode='single-persist']"))
    )
    driver.execute_script("arguments[0].click();", font_combobox)
    print("‚úÖ ƒê√£ m·ªü combobox ch·ªçn font")
    # Ch·ªù v√† ch·ªçn m·ªôt item (v√≠ d·ª•: "sans-serif")
    # Ch·ªù c√°c option xu·∫•t hi·ªán trong DOM
    WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "calcite-combobox-item"))
    )
    time.sleep(2)  # Ch·ªù combobox load
    # L·∫•y danh s√°ch t·∫•t c·∫£ c√°c option
    font_options = driver.find_elements(By.CSS_SELECTOR, "calcite-combobox-item")
    for option in font_options:
        font_name = option.get_attribute("text-label")
        print(f"üìå T√¨m th·∫•y font: {font_name}")
        if font_name == "sans-serif":
            driver.execute_script("arguments[0].click();", option)
            break
    else:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y font 'sans-serif'! H√£y ki·ªÉm tra l·∫°i t√™n font.")
    # Ch·ªù ph·∫ßn t·ª≠ xu·∫•t hi·ªán trong DOM
    custom_font = wait.until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "calcite-switch[data-test-custom-checkbox]"))
    )
    # Cu·ªôn ƒë·∫øn ph·∫ßn t·ª≠ ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ th·ªÉ t∆∞∆°ng t√°c
    driver.execute_script("arguments[0].scrollIntoView();", custom_font)
    time.sleep(1)
    # Click b·∫±ng JavaScript v√¨ Selenium kh√¥ng h·ªó tr·ª£ click tr·ª±c ti·∫øp v√†o calcite-switch
    driver.execute_script("arguments[0].click();", custom_font)
    # Find the label element and its associated input element to select the font file
    label_element = driver.find_element(
        By.CSS_SELECTOR, "label[data-test-input-label='']"
    )
    file_input_element_id = label_element.get_attribute("for")
    file_input_element = driver.find_element(By.ID, file_input_element_id)
    font_file = os.path.abspath(font)
    file_input_element.send_keys(font_file)
    print(f"‚úÖ ƒê√£ ch·ªçn font ch·ªØ: {font}")

    # Nh·∫•n n√∫t xu·∫•t file STL
    export_button = wait.until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "calcite-split-button[data-test-export-stl]"))
    )
    export_button.click()
    print("‚úÖ ƒêang xu·∫•t file STL...")
    # Ch·ªù file t·∫£i v·ªÅ v√† ƒë·ªïi t√™n file
    time.sleep(5)
    download_folder = os.path.join(os.path.expanduser("~"), "Downloads")
    matching_files = glob.glob(os.path.join(download_folder, "output*.stl"))

    # In danh s√°ch file t√¨m th·∫•y
    if not matching_files:
        raise FileNotFoundError("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file STL trong th∆∞ m·ª•c t·∫£i xu·ªëng.")
    download_path = matching_files[0]  # L·∫•y file ƒë·∫ßu ti√™n trong danh s√°ch
    new_path = os.path.join(download_folder, "output.stl")
    if os.path.exists(new_path):
        os.remove(new_path)

    os.rename(download_path, new_path)
    print(f"‚úÖ ƒê√£ ƒë·ªïi t√™n file th√†nh: {new_path}")


    # ƒê√≥ng tr√¨nh duy·ªát
    driver.quit()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate STL files from text")
    parser.add_argument("names", nargs="+", help="List of names to convert into STL files.")
    args = parser.parse_args()

    # Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p name2, width, height, font
    name2 = input("Nh·∫≠p n·ªôi dung th·ª© hai: ")

    while True:
        try:
            width = float(input("Nh·∫≠p chi·ªÅu r·ªông (mm): "))  # Ki·ªÉm tra nh·∫≠p s·ªë h·ª£p l·ªá
            break
        except ValueError:
            print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá!")

    while True:
        try:
            height = float(input("Nh·∫≠p chi·ªÅu cao (mm): "))  # Ki·ªÉm tra nh·∫≠p s·ªë h·ª£p l·ªá
            break
        except ValueError:
            print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá!")

    font = input("Nh·∫≠p t√™n font ch·ªØ (v√≠ d·ª•: Arial, Times New Roman, VL_Selfie.otf): ")

    for name in tqdm(args.names, desc="Generating STL files"):
        generate_stl(name.lower(), name2, width, height, font)


